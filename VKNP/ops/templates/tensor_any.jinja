/// Dynamically-typed Tensor: wraps `Tensor<T>` for various T
pub enum TensorAnyRef<'a> {
{%- for t in types %}
    {{ t.name }}(&'a Tensor<{{ t.rust }}>),
{%- endfor %}
}

impl<'a> TensorAnyRef<'a> {
    pub fn dtype(&self) -> DataType {
        match self {
        {%- for t in types %}
            TensorAnyRef::{{ t.name }}(_) => DataType::{{ t.name }},
        {%- endfor %}
        }
    }

    pub fn view(&self) -> &ViewDescriptor {
        match self {
        {%- for t in types %}
            TensorAnyRef::{{ t.name }}(t) => t.view(),
        {%- endfor %}
        }
    }
}

{# Impl From<&Tensor<T>> for TensorAnyRef<'_> #}
{%- for t in types %}
impl<'a> From<&'a Tensor<{{ t.rust }}>> for TensorAnyRef<'a> {
    fn from(t: &'a Tensor<{{ t.rust }}>) -> Self {
        TensorAnyRef::{{ t.name }}(t)
    }
}
{%- endfor %}
